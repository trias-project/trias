% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/apply_gam.R
\name{apply_gam}
\alias{apply_gam}
\title{Apply GAM to time series and assess emerging status}
\usage{
apply_gam(
  df,
  y_var,
  eval_years,
  year = "year",
  taxonKey = "taxonKey",
  type_indicator = "observations",
  baseline_var = NULL,
  p_max = 0.1,
  taxon_key = NULL,
  name = NULL,
  df_title = NULL,
  x_label = "year",
  y_label = "Observations",
  saveplot = FALSE,
  dir_name = NULL,
  verbose = FALSE
)
}
\arguments{
\item{df}{df. A dataframe containing temporal data.}

\item{y_var}{character. Name of column containing variable to model. It has
to be passed as string, e.g. \code{"occurrences"}.}

\item{eval_years}{numeric. Temporal value(s) when emerging status has to be
evaluated.}

\item{year}{character. Name of column containing temporal values. It has to
be passed as string, e.g. \code{"time"}. Default: \code{"year"}.}

\item{taxonKey}{character. Name of column containing taxon IDs. It has to be
passed as string, e.g. \code{"taxon"}. Default: \code{"taxonKey"}.}

\item{type_indicator}{character. One of \code{"observations"},
\code{"occupancy"}. Used in title of the output plot. Default:
\code{"observations"}.}

\item{baseline_var}{character. Name of the column containing values to use
as additional covariate. Such covariate is introduced in the model to
correct research effort bias. Default: \code{NULL}. If \code{NULL} internal
variable \code{method_em = "basic"}, otherwise \code{method_em = "correct_baseline"}.
Value of \code{method_em} will be part of title of output plot.}

\item{p_max}{numeric. A value between 0 and 1. Default: 0.1.}

\item{taxon_key}{numeric, character. Taxon key the timeseries belongs to.
Used exclusively in graph title and filename (if \code{saveplot = TRUE}).
Default: \code{NULL}.}

\item{name}{character. Species name the timeseries belongs to. Used
exclusively in graph title and filename (if \code{saveplot = TRUE}).
Default: \code{NULL}.}

\item{df_title}{character. Any string you would like to add to graph titles
and filenames (if \code{saveplot = TRUE}). The title is always composed of:
\code{"GAM"} + \code{type_indicator} + \code{method_em} + \code{taxon_key}
\itemize{
\item \code{name} + \code{df_title} separated by underscore ("_"). Default:
\code{NULL}.
}}

\item{x_label}{character. x-axis label of output plot. Default:
\code{"year"}.}

\item{y_label}{character. y-axis label of output plot. Default:
\code{"number of observations"}.}

\item{saveplot}{logical. If \code{TRUE} the plots are authomatically saved.
Default: \code{FALSE}.}

\item{dir_name}{character. Path of directory where saving plots. If path
doesn't exists, directory will be created. Example: "./output/graphs/". If
\code{NULL}, plots are saved in current directory. Default: \code{NULL}.}

\item{verbose}{logical. If \code{TRUE} status of processing and possible
issues are returned. Default: \code{FALSE}.}
}
\value{
list with six slots:
\enumerate{
\item \code{em_summary}: df. A data.frame summarizing the emerging status
outputs. \code{em_summary} contains as many rows as the length of input variable
\code{eval_year}. So, if you evaluate GAM on three years, \code{em_summary} will
contain three rows. It contains the following columns:
\itemize{
\item \code{"taxonKey"}: column containing taxon ID. Column name equal to value of
argument \code{taxonKey}.
\item \code{"year"}: column containing temporal values. Column name equal
to value of argument \code{year}. Column itself is equal to value of
argument \code{eval_years}. So, if you evaluate GAM on years 2017, 2018
(\code{eval_years = c(2017, 2018)}), you will get these two values in this
column.
\item \code{em_status}: numeric. Emerging statuses, an integer
between 0 and 3.
\item \code{growth}: numeric. Lower limit of GAM confidence interval for the first
derivative, if positive. It represents the lower guaranteed growth.
\item \code{method}: character. GAM method, One of: \code{"correct_baseline"} and
\code{"basic"}. See details above in description of argument \code{use_baseline}.
}

\item \code{model}: gam object. The model as returned by \code{gam()} function.
\code{NULL} if GAM cannot be applied.

\item \code{output}: df. Complete data.frame containing more details than the
summary \code{em_summary}. It contains the following columns:
\itemize{
\item \code{taxonKey}: column containing taxon ID. Column name equal to value of
argument \code{taxonKey}.
\item \code{canonicalName}: name related to
\item \code{year}
\item \code{n}
\item \code{n_class}
\item \code{method}: character. GAM method, One of: \code{"correct_baseline"} and
\code{"basic"}. See details above in description of argument \code{use_baseline}.
\item \code{fit}: numeric. Fit values.
\item \code{ucl}: numeric. The upper confidence level values.
\item \code{lcl}: numeric. The lower confidence level values.
\item \code{em1}: numeric. The emergency value for the 1st derivative. -1, 0 or +1.
\item \code{em2}: numeric. The emergency value for the 2nd derivative: -1, 0 or +1.
\item \code{em}: numeric. The emergency value: from -4 to +4, based on \code{em1} and
\code{em2}. See Details.
\item \code{em_status}: numeric. Emerging statuses, an integer
between 0 and 3. See Details.
\item \code{growth}: numeric. Lower limit of GAM confidence interval for the first
derivative, if positive. It represents the lower guaranteed growth.
}

\item \code{first_derivative}: df. Data.frame with details of first derivatives.
It contains the following columns:
\itemize{
\item \code{smooth}: smoooth identifier. Example: \code{s(year)}.
\item \code{var}: character. Column name the smoother is applied to.
\item \code{data}: numeric. Data in columns defined by \code{var}.
\item \code{derivative}: numeric. Value of first derivative.
\item \code{se}: numeric. Standard error of \code{derivative}.
\item \code{crit}: numeric. Critical value required such that
\code{derivative + (se * crit)} and \code{derivative - (se * crit)} form
the upper and lower bounds of the confidence interval on the first
derivative of the estimated smooth at the specific confidence level. In our
case the confidence level is hard-coded: 0.8.
Then \code{crit <- qnorm(p = (1-0.8)/2, mean = 0, sd = 1, lower.tail = FALSE)}.
\item \code{lower_ci}: numeric. Lower bound of the confidence interval of the
estimated smooth.
\item \code{upper_ci}: numeric. Upper bound of the
confidence interval of the estimated smooth.
\item value of argument \code{year}: column with temporal values.
}

\item \code{second_derivative}: df. Data.frame with details of second
derivatives. Same columns as \code{first_derivatives}.

\item \code{plot}: a ggplot2 object. Plot of observations with GAM output and
emerging status. If emerging status cannot be assessed only observations are
plotted.
}
}
\description{
This function applies generalized additive models (GAM) to assess emerging
status for a certain time window.
}
\details{
The GAM modelling is performed using the \code{mgcvb::gam()}. To use this function, we pass:
\itemize{
\item a formula
\item a family object specifying the distribution
\item a smoothing parameter estimation method
}

For more information about all other arguments, see \verb{[mgcv::gam()]}.

If no covariate is used (\code{baseline_var} = NULL), the GAM formula is:
\code{n ~ s(year, k = maxk, m = 3, bs = "tp")}. Otherwise the GAM formula has a
second term, \code{s(n_covariate)} and so the GAM formula is
\code{n ~ s(year, k = maxk, m = 3, bs = "tp") + s(n_covariate)}.

Description of the parameters present in the formula above:
\itemize{
\item \code{k}: dimension of the basis used to represent the smooth term, i.e. the
number of \emph{knots} used for calculating the smoother. We #' set \code{k} to \code{maxk},
which is the number of decades in the time series. If less than 5 decades are
present in the data, \code{maxk} is #' set to 5.
\item \code{bs} indicates the basis to use for the smoothing: we uses the default
penalized thin plate regression splines.
\item \code{m} specifies the order of the derivatives in the thin plate spline
penalty. We use \code{m = 3}, the default value.
}

We use \verb{[mgcv::nb()]}, a negative binomial family to perform the GAM.

The smoothing parameter estimation method is set to REML (Restricted maximum
likelihood approach). If the P-value of the GAM smoother(s) is/are above
threshold value \code{p_max}, GAM is not performed and the next warning is
returned: "GAM output cannot be used: p-values of all GAM smoothers are above
\{p_max\}" where \code{p_max} is the P-value used as threshold as defined by
argument \code{p_max}.

If the \code{mgcv::gam()} returns an error or a warning, the following message is
returned to the user: "GAM (\{method_em\}) cannot be performed or cannot
converge.", where \code{method_em} is one of \code{"basic"} or \code{"correct_baseline"}.
See argument \code{baseline_var}.

The first and second derivatives of the smoother is calculated using function
\code{gratia::derivatives()} with the following hard coded arguments:
\itemize{
\item \code{type}: the type of finite difference used. Set  to \code{"central"}.
\item \code{order}: 1 for the first derivative, 2 for the second derivative
\item \code{level}: the confidence level. Set to 0.8
\item \code{eps}: the finite difference. Set to 1e-4.
}

For more details, please check \link[gratia]{derivatives}.

The sign of the lower and upper confidence levels of the first and second
derivatives are used to define a detailed emergency status (\code{em}) which is
internally used to return the emergency status, \code{em_status}, which is a
column of the returned data.frame \code{em_summary}.\tabular{llllll}{
   ucl-1 \tab lcl-1 \tab ucl-2 \tab lcl-2 \tab em \tab em_status \cr
   + \tab + \tab + \tab + \tab 4 \tab 3 (emerging) \cr
   + \tab + \tab + \tab - \tab 3 \tab 3 (emerging) \cr
   + \tab + \tab - \tab - \tab 2 \tab 2 (potentially emerging) \cr
   - \tab + \tab + \tab + \tab 1 \tab 2 (potentially emerging) \cr
   + \tab - \tab + \tab - \tab 0 \tab 1 (unclear) \cr
   + \tab - \tab - \tab - \tab -1 \tab 0 (not emerging) \cr
   - \tab - \tab + \tab + \tab -2 \tab 0 (not emerging) \cr
   - \tab - \tab + \tab - \tab -3 \tab 0 (not emerging) \cr
   - \tab - \tab - \tab - \tab -4 \tab 0 (not emerging) \cr
}
}
\examples{
\dontrun{
library(dplyr)
df_gam <- tibble(
  taxonKey = rep(3003709, 24),
  canonicalName = rep("Rosa glauca", 24),
  year = seq(1995, 2018),
  n = c(
    1, 1, 0, 0, 0, 2, 0, 0, 1, 3, 1, 2, 0, 5, 0, 5, 4, 2, 1,
    1, 3, 3, 8, 10
  ),
  n_class = c(
    229, 555, 1116, 939, 919, 853, 442, 532, 623, 1178, 732, 371, 1053,
    1001, 1550, 1142, 1076, 1310, 922, 1773, 1637,
    1866, 2234, 2013
  )
)
# apply GAM to n without baseline as covariate
apply_gam(df_gam,
  y_var = "n",
  eval_years = 2018,
  taxon_key = 3003709,
  name = "Rosa glauca",
  verbose = TRUE
)
# apply GAM using baseline data in column n_class as covariate
apply_gam(df_gam,
  y_var = "n",
  eval_years = 2018,
  baseline_var = "n_class",
  taxon_key = 3003709,
  name = "Rosa glauca",
  verbose = TRUE
)
# apply GAM using n as occupancy values, evaluate on two years. No baseline
apply_gam(df_gam,
  y_var = "n",
  eval_years = c(2017, 2018),
  taxon_key = 3003709,
  type_indicator = "occupancy",
  name = "Rosa glauca",
  y_label = "occupancy",
  verbose = TRUE
)
# apply GAM using n as occupancy values and n_class as covariate (baseline)
apply_gam(df_gam,
  y_var = "n",
  eval_years = c(2017, 2018),
  baseline_var = "n_class",
  taxon_key = 3003709,
  type_indicator = "occupancy",
  name = "Rosa glauca",
  y_label = "occupancy",
  verbose = TRUE
)
# How to use other arguments
apply_gam(df_gam,
  y_var = "n",
  eval_years = c(2017, 2018),
  baseline_var = "n_class",
  p_max = 0.3,
  taxon_key = "3003709",
  type_indicator = "occupancy",
  name = "Rosa glauca",
  df_title = "Belgium",
  x_label = "time (years)",
  y_label = "area of occupancy (km2)",
  saveplot = TRUE,
  dir_name = "./data/",
  verbose = TRUE
)
# warning returned if GAM cannot be applied and plot with only observations
df_gam <- tibble(
taxonKey = rep(3003709, 24),
canonicalName = rep("Rosa glauca", 24),
year = seq(1995, 2018),
obs = c(
  1, 1, 0, 0, 0, 2, 0, 0, 1, 3, 1, 2, 0, 5, 0, 5, 4, 2, 1,
  1, 3, 3, 8, 10
),
cobs = rep(0, 24)
)
no_gam_applied <- apply_gam(df_gam,
                            y_var = "obs",
                            eval_years = 2018,
                            taxon_key = 3003709,
                            name = "Rosa glauca",
                            baseline_var = "cobs",
                            verbose = TRUE
)
no_gam_applied$plot
}

}

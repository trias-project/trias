% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/apply_gam.R
\name{apply_gam}
\alias{apply_gam}
\title{Apply GAM to time series and assess emerging status}
\usage{
apply_gam(df, y_var, eval_years, year = "year", taxonKey = "taxonKey",
  type_indicator = "observations", baseline_var = NULL, p_max = 0.1,
  taxon_key = NULL, name = NULL, df_title = NULL, saveplot = FALSE,
  dir_name = NULL, verbose = FALSE)
}
\arguments{
\item{df}{df. A dataframe containing temporal data.}

\item{y_var:}{character. Name of column containing variable to model. It has
to be passed as string, e.g. \code{"occurrences"}.}

\item{eval_years:}{numeric. Temporal value(s) where emerging status has to be
evaluated.}

\item{year:}{character. Name of column containing temporal values, e.g. years
as numeric. It has to be passed as string, e.g. \code{"time"}. Default:
\code{"year"}.}

\item{taxonKey:}{character. Name of column containing taxon IDs. It has to be
passed as string, e.g. \code{"taxon"}. Default: \code{"taxonKey"}.}

\item{type_indicator:}{character. One of \code{"observations"},
\code{"occupancy"}. Used in title of the output plot. Default:
\code{"observations"}.}

\item{baseline_var:}{character. Name of the column containing values to use
as additional covariate. Such covariate is introduced in the model to
correct research effort bias. Default: \code{NULL}. If \code{NULL} internal
variable \code{method_em = "basic"}, otherwise \code{method_em =
"correct_baseline"}. Value of \code{method_em} will be part of title of
output plot.}

\item{p_max:}{numeric. A value between 0 and 1. Default: 0.1.}

\item{taxon_key:}{numeric, character. TaxonKey the timeseries belongs to.
Used exclusively in graph title and filename (if \code{saveplot = TRUE}).
Default: \code{NULL}.}

\item{name:}{character. Species name the timeseries belongs to. Used
exclusively in graph title and filename (if \code{saveplot = TRUE}).
Default: \code{NULL}.}

\item{df_title:}{character. Any string you would like to use in graph titles
and filenames (if \code{saveplot = TRUE}). The title is composed of:
\code{"GAM_"} + \code{type_indicator} + \code{method_em} + \code{taxon_key}
+ \code{name}. Default: \code{NULL}.}

\item{verbose:}{logical. If \code{TRUE} status of processing is returned.
Default: \code{FALSE}.}

\item{saveplot:}{logical. If \code{TRUE} the plots are authomatically saved.
Default: \code{FALSE}.}
}
\value{
list. List with three objects: \itemize{\item{\code{em_summary}: df.
  A data.frame summarizing results, i.e. emerging statuses. \code{em_summary}
  contains as many rows as the length of input variable \code{eval_year}. So,
  if you evaluate GAM on three years, \code{em_summary} will contain three
  rows. Columns: \itemize{\item{\code{"taxonKey"}: column containing taxon
  ID. Column name equal to value of argument \code{taxonKey}.}
  \item{\code{"year"}: column containing temporal values. Column name equal
  to value of argument \code{year}. Column itself is equal to value of
  argument \code{eval_years}. So, if you evaluate GAM on years 2017, 2018
  (\code{eval_years = c(2017, 2018)}), you will get these two values in this
  column.} \item{\code{em_status}: numeric. Emerging statuses, an integer
  between 0 and 3.} \item{\code{growth}: numeric. Lower limit of GAM
  confidence interval for the first derivative. It represents the lower
  guaranteed growth.} \item{\code{method}: character. GAM method, as defined
  by internal variable \code{method_em}. One of: \code{"correct_baseline"}
  and \code{"basic"}. See details above in description of argument
  \code{use_baseline}.}}} \item{\code{model}: GAM. The model as returned by
  GAM.} \item{\code{first_derivative}: df. Data.frame with details of first
  derivatives. It contains following columns: \itemize{\item{\code{}}}}}
}
\description{
This function applies generalized additive models (GAM) to assess emerging
status for a certain time window.
}
\examples{
\dontrun{
df_gam <- tibble(
  taxonKey = rep(2224970, 20),
  canonicalName = rep("Palaemon macrodactylus", 20),
  year = seq(2000, 2019),
  n_observations = c(1, 5, 3, 12, 10, 3, 5, 0, 1, 3, 2, 4, 1,3, 3, 4,3, 0, 5, 1)
  )
}
}
